<?xml version="1.0" encoding="UTF-8"?>
<config
	xmlns="http://web-harvest.sourceforge.net/schema/1.0/config"
	scriptlang="groovy">

	<robotics-flow>
		<robot driver="universal" close-on-completion="true"
			start-in-private="false">
			<capability name="SEARCH_ALL_WINDOWS" value="true" />
			<capability name="CLOSE_ALL_WINDOWS" value="false" />
			<script><![CDATA[
				import com.workfusion.common.utils.WebDriverHelper;
				import com.workfusion.studio.rpa.recorder.api.*
				import com.workfusion.studio.rpa.recorder.api.types.*
				import com.workfusion.studio.rpa.recorder.api.custom.*
				import com.workfusion.studio.rpa.recorder.api.internal.representation.*
				import com.workfusion.bot.exception.*
				
				import org.openqa.selenium.By;
				import org.openqa.selenium.Point;
				import org.openqa.selenium.WebDriver;
				import org.openqa.selenium.WebElement;
				import org.openqa.selenium.chrome.ChromeDriver;
				import org.openqa.selenium.interactions.Actions;
				
				import java.util.*;
				
				ArrayList Explored = new ArrayList(); // list of xpaths displayed
				
				
				ArrayList Search = new ArrayList();	  // list of xpaths of x,o class to check if displayed
				Search.add("/html/body/div[3]/div[1]/div[1]/div")
				Search.add("/html/body/div[3]/div[1]/div[2]/div")
				Search.add("/html/body/div[3]/div[1]/div[3]/div")
				Search.add("/html/body/div[3]/div[1]/div[4]/div")
				Search.add("/html/body/div[3]/div[1]/div[5]/div")
				Search.add("/html/body/div[3]/div[1]/div[6]/div")
				Search.add("/html/body/div[3]/div[1]/div[7]/div")
				Search.add("/html/body/div[3]/div[1]/div[8]/div")
				Search.add("/html/body/div[3]/div[1]/div[9]/div")
				
				
				def cBoard = [" ", " ", " ", " ", " ", " ", " ", " ", " "] as String[]; // current board to date
				def nBoard = [" ", " ", " ", " ", " ", " ", " ", " ", " "] as String[]; // board after algorithm runs
				
				
				//list of boxes to click on in order of 3x3 grid
				def xpaths = new String[9]
				xpaths[0] = "/html/body/div[3]/div[1]/div[1]" 
				xpaths[1] = "/html/body/div[3]/div[1]/div[2]"
				xpaths[2] = "/html/body/div[3]/div[1]/div[3]"
				xpaths[3] = "/html/body/div[3]/div[1]/div[4]" 
				xpaths[4] = "/html/body/div[3]/div[1]/div[5]"
				xpaths[5] = "/html/body/div[3]/div[1]/div[6]"
				xpaths[6] = "/html/body/div[3]/div[1]/div[7]" 
				xpaths[7] = "/html/body/div[3]/div[1]/div[8]"
				xpaths[8] = "/html/body/div[3]/div[1]/div[9]"
				
				System.setProperty("webdriver.chrome.driver", "C:\\webdrivers\\chromedriver.exe");
				WebDriver driver = new ChromeDriver();
				
				String appURL = "https://playtictactoe.org/"
				driver.get(appURL);

				com.workfusion.rpa.helpers.RPA.metaClass.static.$ = { Closure c -> c.call() } // Support for Expression action. Should be implemented in RPA class in next release
				sleep(4000)
				
				//loop until gam ends while cboard is not in a goal state
				def stop = 0
				int k = 0
				while (stop == 0)
				{
					sleep(1500)
					//check if x is visible  x image class xpath
					/**tictactoe.org*/
					for(int i = 0; i < Search.size(); i++)
					{
						String checkPath = Search.get(i)
						if (driver.findElement(By.xpath(checkPath)).isDisplayed())//box 0,0 x class
						{
							if (!(Explored.contains(checkPath)))
							{
								Explored.add(checkPath)
								//System.out.println(Arrays.toString(Explored))
								cBoard[i] = "o"
								//println cBoard
								//break //out of loop
								//driver.findElement(By.xpath("/html/body/a")).click()//xpath weird button
								//sleep(5000)
							}
							/*
							else
							{
								println cBoard
								driver.findElement(By.xpath("/html/body/div[2]")).click()//mute button
								sleep(5000)
							}
							*/
						}
					}
					print(k)				
					print("\t")
					if (k == 0)
					{
						nBoard[4] = "x"
					}
					if (k == 1)
					{
						if ((cBoard[1] == "o") || (cBoard[5] == "o"))
						{
							nBoard[2] = "x"
						}
						if ((cBoard[3] == "o") || (cBoard[7] == "o"))
						{
							nBoard[6] = "x"
						}
					}
					if (k == 2)
					{
						if (nBoard[2] == "x")
						{
							if (cBoard[1] == "o")
							{
								nBoard[5] = "x"
							}
							if (cBoard[5] == "o")
							{
								nBoard[1] = "x"
							}
						}
						if (nBoard[6] == "x")
						{
							if (cBoard[3] == "o")
							{
								nBoard[7] = "x"
							}
							if (cBoard[7] == "o")
							{
								nBoard[3] = "x"
							}
						}
					}
					if (k == 3)
					{
						if (nBoard[5] == "x")
						{
							nBoard[3] = "x"
							nBoard[8] = "x"
						}
						if (nBoard[1] == "x")
						{
							nBoard[0] = "x"
							nBoard[7] = "x"
						}
						if (nBoard[7] == "x")
						{
							nBoard[1] = "x"
							nBoard[8] = "x"
						}
						if (nBoard[3] == "x")
						{
							nBoard[0] = "x"
							nBoard[5] = "x"
						}
							
					}
					println(nBoard)
					
					
					for(int j = 0; j < nBoard.size(); j++)
					{
						if (cBoard[j] != nBoard[j])
						{
							cBoard[j] = nBoard[j]
							driver.findElement(By.xpath(xpaths[j])).click()
							Explored.add(Search.get(j))
							break
						}
					}
					
					/**
					if cBoard is in a goal state break out of loop
					goal states wins losses and draws
					*/
					k++
					if(k == 4)
					{
						stop = 1
					}
					/*if (isgoal(cBoard) == 2)
					{
						stop = 1
					}
					*/
				}
	//end of game			
				
				
				
				sleep(10000)
				
				/* 
				else 
				{
					driver.findElement(By.xpath(xpaths[0])).click()//xpath of box 0,0
					sleep(5000)
				}
				*/
				
				
				
				
				
				
				inDesktop
				{
					sendKeys(StringTransformations.getHotKeyText(119, 2))//close window
				}
				
				
				static int isgoal(String[] board)
				{	
					String test = "";
					int rVal = 2; //0  is default game is still i play
					List<String> cList = Arrays.asList(board);
			
					if (!cList.contains(" ")) //board is full its a draw
					{			
						rVal = 0;//draw return code			
					}			
					else			
					{			
						for(int i = 0; i < 2; i++)			
						{			
							if (i == 0)			
							{			
								test = "x";			
								rVal = 10;//win retrun code			
							}			
							if (i == 1)			
							{			
								test = "o";			
								rVal = -10;//lose return code			
							}
							//break out of loop if conditions are met		
							if (board[0].equals(test))
							{
								if (board[1].equals(test) && (board[2].equals(test)))
								{
									break;
								}
								if (board[3].equals(test) && (board[6].equals(test)))
								{
									break;
								}
								if (board[4].equals(test) && (board[8].equals(test)))
								{		
									break;
								}			
							}			
							if (board[1].equals(test))			
							{			
								if (board[4].equals(test) && (board[7].equals(test)))
								{			
									break;			
								}			
							}			
							if (board[2].equals(test))			
							{			
								if (board[5].equals(test) && (board[8].equals(test)))			
								{			
									break;			
								}			
								if (board[4].equals(test) && (board[6].equals(test)))			
								{			
									break;
								}
							}
							if (board[3].equals(test))			
							{			
								if (board[4].equals(test) && (board[5].equals(test)))			
								{			
									break;			
								}			
							}			
							if (board[6].equals(test))			
							{			
								if (board[7].equals(test) && (board[8].equals(test)))			
								{			
									break;			
								}			
							}			
							rVal = 2;			
						}			
					}			
					return rVal;
				}
					
				
			]]></script>
		</robot>
	</robotics-flow>
	<export include-original-data="true">
	</export>

</config>